Q1
import java.util.HashSet;
import java.util.Scanner;

class prog {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Input the size of the HashSet
        int n = sc.nextInt();

        // Initialize a HashSet
        HashSet<Integer> set = new HashSet<>();

        // Input n elements into the HashSet
        for (int i = 0; i < n; i++) {
            set.add(sc.nextInt());
        }

        // Input the element to check in the HashSet
        int elementToCheck = sc.nextInt();

        // Check if the element is in the set
        if (set.contains(elementToCheck)) {
            System.out.println(elementToCheck + " was found in the set.");
        } else {
            System.out.println(elementToCheck + " was not found in the set.");
        }
    }
}
Q2
import java.util.HashSet;
import java.util.Scanner;

class prog {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Input size of the first HashSet
        int n1 = sc.nextInt();
        sc.nextLine(); // Consume the newline

        // Initialize the first HashSet
        HashSet<String> set1 = new HashSet<>();
        for (int i = 0; i < n1; i++) {
            set1.add(sc.nextLine());
        }

        // Input size of the second HashSet
        int n2 = sc.nextInt();
        sc.nextLine(); // Consume the newline

        // Initialize the second HashSet
        HashSet<String> set2 = new HashSet<>();
        for (int i = 0; i < n2; i++) {
            set2.add(sc.nextLine());
        }

        // Retain only common elements in set1
        set1.retainAll(set2);

        // Print the common elements
        for (String element : set1) {
            System.out.println(element);
        }
    }
}
Q3
import java.util.HashMap;
import java.util.Scanner;

class prog {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Create a HashMap
        HashMap<String, Integer> map = new HashMap<>();

        // Input size of the HashMap
        int n = sc.nextInt();
        sc.nextLine(); // Consume newline

        // Add entries to the HashMap
        for (int i = 0; i < n; i++) {
            String key = sc.nextLine();
            int value = sc.nextInt();
            sc.nextLine(); // Consume newline
            map.put(key, value); // Put key-value pair into the map
        }

        // Sample operations on HashMap

        // Check if a key exists in the map
        System.out.println("Contains key 'Apple': " + map.containsKey("Apple"));

        // Check if a value exists in the map
        System.out.println("Contains value 100: " + map.containsValue(100));

        // Put a new entry if the key does not exist
        map.putIfAbsent("Banana", 300);

        // Remove an entry from the map
        map.remove("Apple");

        // Replace the value of an existing key
        map.replace("Banana", 300);

        // Print the map size
        System.out.println("Size of map: " + map.size());

        // Display the final map contents
        System.out.println("Map contents: " + map);
    }
}
